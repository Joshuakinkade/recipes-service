// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getRecipe = `-- name: GetRecipe :one
SELECT r.id, r.name, r.description, r.created_at, r.updated_at, r.deleted_at, ri.id, ri.quantity, ri.unit, i.id, i.name, s.id, s.step_number, s.directions 
FROM recipes r LEFT JOIN recipe_ingredients ri ON r.id = ri.recipe LEFT JOIN ingredients i ON ri.ingredient = i.id LEFT JOIN steps s ON r.id = s.recipe 
WHERE r.deleted_at IS NULL AND r.id = $1
`

type GetRecipeRow struct {
	ID          uuid.UUID
	Name        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   sql.NullTime
	ID_2        uuid.NullUUID
	Quantity    sql.NullFloat64
	Unit        sql.NullString
	ID_3        uuid.NullUUID
	Name_2      sql.NullString
	ID_4        uuid.NullUUID
	StepNumber  sql.NullInt32
	Directions  sql.NullString
}

func (q *Queries) GetRecipe(ctx context.Context, id uuid.UUID) (GetRecipeRow, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i GetRecipeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.Quantity,
		&i.Unit,
		&i.ID_3,
		&i.Name_2,
		&i.ID_4,
		&i.StepNumber,
		&i.Directions,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, description, created_at, updated_at, deleted_at FROM recipes WHERE deleted_at IS NULL AND user_id = $1
`

type ListRecipesRow struct {
	ID          uuid.UUID
	Name        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   sql.NullTime
}

func (q *Queries) ListRecipes(ctx context.Context, userID uuid.UUID) ([]ListRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipesRow
	for rows.Next() {
		var i ListRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
